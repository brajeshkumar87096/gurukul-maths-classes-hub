# Add the GitHub repository as a remote
git remote add origin https://github.com/YOUR-USERNAME/gurukul-maths-hub.git

# Rename the default branch to 'main' (if needed)
git branch -M main

# Push your code to GitHub
git push -u origin main# Create workflows directory
mkdir -p .github/workflows

# Create main workflow file
echo "name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Build with Maven
      run: |
        cd backend
        mvn -B package --file pom.xml -DskipTests
      
    - name: Test with Maven
      run: |
        cd backend
        mvn -B test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres
        SPRING_JPA_HIBERNATE_DDL_AUTO: update" > .github/workflows/maven.yml# Add the new workflow file
        git add .github/workflows/maven.yml
        
        # Commit the changes
        git commit -m "Add GitHub Actions workflow for CI"
        
        # Push to GitHub
        git push# Create GitHub Pages workflow
        echo "name: Deploy to GitHub Pages
        
        on:
          push:
            branches: [ main ]
          workflow_dispatch:
        
        jobs:
          build-and-deploy:
            runs-on: ubuntu-latest
            steps:
              - uses: actions/checkout@v3
              
              - name: Set up Node.js
                uses: actions/setup-node@v3
                with:
                  node-version: '18'
                  cache: 'npm'
              
              - name: Install dependencies
                run: npm ci
                
              - name: Build
                run: npm run build
                
              - name: Deploy to GitHub Pages
                uses: JamesIves/github-pages-deploy-action@v4
                with:
                  folder: dist
                  branch: gh-pages" > .github/workflows/gh-pages.yml# Add all files
                  git add .
                  
                  # Commit changes
                  git commit -m "Add GitHub Actions for CI/CD and GitHub Pages"
                  
                  # Push to GitHub
                  git pushversion: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gurukul_maths_db
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-gurukul_maths_hub}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_NAME:-gurukul_maths_hub}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - gurukul-network

  # pgAdmin 4 - Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@gurukulmaths.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - gurukul-network

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: gurukul_maths_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-your_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - gurukul-network

networks:
  gurukul-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
  redis_data:
